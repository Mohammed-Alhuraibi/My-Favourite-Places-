# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file '.\personPage.ui'
#
# Created by: PyQt5 UI code generator 5.15.7
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


import folium
import sqlite3
import base64
import io
import traceback


import userInfo
from PyQt5 import QtCore, QtGui, QtWidgets,QtWebEngineWidgets
from PyQt5.QtWidgets import QFileDialog
from PyQt5.QtGui import QPixmap
import sip


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1038, 936)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setStyleSheet("background-color:#16213E;\n"
"")
        self.centralwidget.setObjectName("centralwidget")
        self.img = QtWidgets.QLabel(self.centralwidget)
        self.img.setGeometry(QtCore.QRect(860, 20, 141, 141))
        self.img.setStyleSheet("border-radius:10px;border:5px solid white;")
        self.img.setText("")
        self.img.setPixmap(QtGui.QPixmap(".\\Images/person.png"))
        self.img.setScaledContents(True)
        self.img.setObjectName("img")
        self.username = QtWidgets.QLabel(self.centralwidget)
        self.username.setGeometry(QtCore.QRect(500, 40, 321, 41))
        font = QtGui.QFont()
        font.setFamily("Rockwell")
        font.setPointSize(20)
        font.setBold(False)
        font.setWeight(50)
        self.username.setFont(font)
        self.username.setStyleSheet("color:#f0f0f0f0;\n"
"background-color:none;\n"
"\n"
"")
        self.username.setScaledContents(True)
        self.username.setOpenExternalLinks(True)
        self.username.setObjectName("username")
        self.userId = QtWidgets.QLabel(self.centralwidget)
        self.userId.setGeometry(QtCore.QRect(500, 100, 311, 31))
        font = QtGui.QFont()
        font.setPointSize(18)
        font.setBold(False)
        font.setWeight(50)
        self.userId.setFont(font)
        self.userId.setStyleSheet("color:#f0f0f0f0;\n"
"background-color:none;")
        self.userId.setObjectName("userId")
        self.addBtn = QtWidgets.QPushButton(self.centralwidget)
        self.addBtn.setGeometry(QtCore.QRect(360, 720, 281, 51))
        font = QtGui.QFont()
        font.setPointSize(20)
        self.addBtn.setFont(font)
        self.addBtn.setFocusPolicy(QtCore.Qt.NoFocus)
        self.addBtn.setStyleSheet("\n"
"QPushButton{\n"
"\n"
"background-color:#E94560;\n"
"color:white;\n"
"border-radius:25px;\n"
"\n"
"}\n"
"\n"
"QPushButton:hover{\n"
"border:5px solid white;\n"
"}\n"
"QPushButton:pressed{\n"
"padding-left:5px;\n"
"padding-top:5px;\n"
"}\n"
"\n"
"\n"
"\n"
"")
        self.addBtn.setObjectName("addBtn")
        self.line = QtWidgets.QFrame(self.centralwidget)
        self.line.setGeometry(QtCore.QRect(150, 800, 761, 5))
        self.line.setStyleSheet("background-color:white;\n"
"\n"
"color:white;")
        self.line.setFrameShadow(QtWidgets.QFrame.Plain)
        self.line.setLineWidth(1)
        self.line.setMidLineWidth(0)
        self.line.setFrameShape(QtWidgets.QFrame.HLine)
        self.line.setObjectName("line")
        self.username_2 = QtWidgets.QLabel(self.centralwidget)
        self.username_2.setGeometry(QtCore.QRect(350, 830, 391, 41))
        font = QtGui.QFont()
        font.setFamily("Rockwell")
        font.setPointSize(24)
        font.setBold(False)
        font.setWeight(50)
        self.username_2.setFont(font)
        self.username_2.setStyleSheet("color:#f0f0f0f0;\n"
"background-color:none;")
        self.username_2.setScaledContents(True)
        self.username_2.setOpenExternalLinks(True)
        self.username_2.setObjectName("username_2")
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setGeometry(QtCore.QRect(520, 830, 50, 50))
        self.label_3.setText("")
        self.label_3.setPixmap(QtGui.QPixmap(".\\Images/heart.png"))
        self.label_3.setScaledContents(True)
        self.label_3.setObjectName("label_3")
        self.signoutBtn = QtWidgets.QPushButton(self.centralwidget)
        self.signoutBtn.setGeometry(QtCore.QRect(40, 40, 141, 31))
        font = QtGui.QFont()
        font.setPointSize(14)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        self.signoutBtn.setFont(font)
        self.signoutBtn.setStyleSheet("\n"
"QPushButton{\n"
"background-color:#95DAC1;\n"
"color:white;\n"
"border-radius:10px;\n"
"}\n"
"\n"
"\n"
"QPushButton:hover{\n"
"border:2px solid white;\n"
"}\n"
"\n"
"QPushButton:pressed{\n"
"padding-left:5px;\n"
"padding-top:5px;\n"
"}")
        self.signoutBtn.setObjectName("signoutBtn")
        self.showBtn = QtWidgets.QPushButton(self.centralwidget)
        self.showBtn.setGeometry(QtCore.QRect(30, 720, 281, 51))
        font = QtGui.QFont()
        font.setPointSize(20)
        self.showBtn.setFont(font)
        self.showBtn.setFocusPolicy(QtCore.Qt.NoFocus)
        self.showBtn.setStyleSheet("\n"
"QPushButton{\n"
"\n"
"background-color:#E94560;\n"
"color:white;\n"
"border-radius:25px;\n"
"\n"
"}\n"
"\n"
"QPushButton:hover{\n"
"border:5px solid white;\n"
"}\n"
"QPushButton:pressed{\n"
"padding-left:5px;\n"
"padding-top:5px;\n"
"}\n"
"\n"
"\n"
"\n"
"")
        self.showBtn.setObjectName("showBtn")
        self.deleteBtn = QtWidgets.QPushButton(self.centralwidget)
        self.deleteBtn.setGeometry(QtCore.QRect(680, 720, 281, 51))
        font = QtGui.QFont()
        font.setPointSize(20)
        self.deleteBtn.setFont(font)
        self.deleteBtn.setFocusPolicy(QtCore.Qt.NoFocus)
        self.deleteBtn.setStyleSheet("\n"
"QPushButton{\n"
"\n"
"background-color:#E94560;\n"
"color:white;\n"
"border-radius:25px;\n"
"\n"
"}\n"
"\n"
"QPushButton:hover{\n"
"border:5px solid white;\n"
"}\n"
"QPushButton:pressed{\n"
"padding-left:5px;\n"
"padding-top:5px;\n"
"}\n"
"\n"
"\n"
"\n"
"")
        self.deleteBtn.setObjectName("deleteBtn")
        self.tabWidget = QtWidgets.QTabWidget(self.centralwidget)
        self.tabWidget.setGeometry(QtCore.QRect(90, 160, 861, 531))
        self.tabWidget.setStyleSheet("/*background-color:#F2F7A1;")
        self.tabWidget.setObjectName("tabWidget")
        self.mapTab = QtWidgets.QWidget()
        self.mapTab.setObjectName("mapTab")
        self.verticalLayoutWidget = QtWidgets.QWidget(self.mapTab)
        self.verticalLayoutWidget.setGeometry(QtCore.QRect(0, 0, 861, 511))
        self.verticalLayoutWidget.setObjectName("verticalLayoutWidget")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.verticalLayoutWidget)
        self.verticalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.tabWidget.addTab(self.mapTab, "")
        self.addTab = QtWidgets.QWidget()
        self.addTab.setStyleSheet("background-color:#F2F7A1;")
        self.addTab.setObjectName("addTab")
        self.latField = QtWidgets.QLineEdit(self.addTab)
        self.latField.setGeometry(QtCore.QRect(200, 170, 141, 41))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.latField.setFont(font)
        self.latField.setStyleSheet("QLineEdit{\n"
"\n"
"background-color:white;\n"
"border-radius:10px;\n"
"padding-left:10px;\n"
"border:2px solid black;\n"
"\n"
"}\n"
"\n"
"QLineEdit:hover{\n"
"border:2px solid #E94560;\n"
"}\n"
"QLineEdit:focus{\n"
"border:2px solid #E94560;\n"
"}")
        self.latField.setText("")
        self.latField.setObjectName("latField")
        self.countryField = QtWidgets.QLineEdit(self.addTab)
        self.countryField.setGeometry(QtCore.QRect(200, 20, 311, 41))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.countryField.setFont(font)
        self.countryField.setStyleSheet("QLineEdit{\n"
"\n"
"background-color:white;\n"
"border-radius:10px;\n"
"padding-left:10px;\n"
"border:2px solid black;\n"
"}\n"
"QLineEdit:hover{\n"
"border:2px solid #E94560;\n"
"}\n"
"QLineEdit:focus{\n"
"border:2px solid #E94560;\n"
"}\n"
"\n"
"\n"
"\n"
"")
        self.countryField.setText("")
        self.countryField.setObjectName("countryField")
        self.descriptionField = QtWidgets.QPlainTextEdit(self.addTab)
        self.descriptionField.setGeometry(QtCore.QRect(200, 240, 311, 151))
        font = QtGui.QFont()
        font.setPointSize(14)
        font.setBold(False)
        font.setWeight(50)
        self.descriptionField.setFont(font)
        self.descriptionField.setStyleSheet("QPlainTextEdit{\n"
"\n"
"background-color:white;\n"
"border-radius:10px;\n"
"padding-left:10px;\n"
"padding-top:10px;\n"
"border:2px solid black;\n"
"\n"
"}\n"
"\n"
"QPlainTextEdit:hover{\n"
"border:2px solid #E94560;\n"
"}\n"
"QPlainTextEdit:focus{\n"
"border:2px solid #E94560;\n"
"}")
        self.descriptionField.setObjectName("descriptionField")
        self.addToFavBtn = QtWidgets.QPushButton(self.addTab)
        self.addToFavBtn.setGeometry(QtCore.QRect(280, 420, 311, 51))
        font = QtGui.QFont()
        font.setPointSize(23)
        self.addToFavBtn.setFont(font)
        self.addToFavBtn.setFocusPolicy(QtCore.Qt.NoFocus)
        self.addToFavBtn.setStyleSheet("\n"
"QPushButton{\n"
"\n"
"background-color:#E94560;\n"
"color:white;\n"
"border-radius:25px;\n"
"\n"
"}\n"
"\n"
"QPushButton:hover{\n"
"border:5px solid white;\n"
"}\n"
"QPushButton:pressed{\n"
"padding-left:5px;\n"
"padding-top:5px;\n"
"}\n"
"\n"
"\n"
"\n"
"\n"
"")
        self.addToFavBtn.setObjectName("addToFavBtn")
        self.cityField = QtWidgets.QLineEdit(self.addTab)
        self.cityField.setGeometry(QtCore.QRect(200, 100, 311, 41))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.cityField.setFont(font)
        self.cityField.setStyleSheet("QLineEdit{\n"
"\n"
"background-color:white;\n"
"border-radius:10px;\n"
"padding-left:10px;\n"
"border:2px solid black;\n"
"\n"
"}\n"
"\n"
"QLineEdit:hover{\n"
"border:2px solid #E94560;\n"
"}\n"
"QLineEdit:focus{\n"
"border:2px solid #E94560;\n"
"}")
        self.cityField.setText("")
        self.cityField.setObjectName("cityField")
        self.addSouvenirImgBtn = QtWidgets.QPushButton(self.addTab)
        self.addSouvenirImgBtn.setGeometry(QtCore.QRect(540, 200, 161, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(75)
        self.addSouvenirImgBtn.setFont(font)
        self.addSouvenirImgBtn.setStyleSheet("\n"
"QPushButton{\n"
"background-color:#95DAC1;\n"
"color:white;\n"
"border-radius:8px;\n"
"}\n"
"\n"
"QPushButton:hover{\n"
"border:3px solid white;\n"
"}\n"
"QPushButton:pressed{\n"
"padding-left:5px;\n"
"padding-top:5px;\n"
"}\n"
"")
        self.addSouvenirImgBtn.setObjectName("addSouvenirImgBtn")
        self.imgSouvenir = QtWidgets.QLabel(self.addTab)
        self.imgSouvenir.setGeometry(QtCore.QRect(530, 20, 171, 171))
        self.imgSouvenir.setStyleSheet("border-radius:15px;border:10px solid white;")
        self.imgSouvenir.setText("")
        self.imgSouvenir.setPixmap(QtGui.QPixmap(".\\Images/havıngFun.jpg"))
        self.imgSouvenir.setScaledContents(True)
        self.imgSouvenir.setObjectName("imgSouvenir")
        self.lngField = QtWidgets.QLineEdit(self.addTab)
        self.lngField.setGeometry(QtCore.QRect(360, 170, 151, 41))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.lngField.setFont(font)
        self.lngField.setStyleSheet("QLineEdit{\n"
"\n"
"background-color:white;\n"
"border-radius:10px;\n"
"padding-left:10px;\n"
"border:2px solid black;\n"
"\n"
"}\n"
"\n"
"QLineEdit:hover{\n"
"border:2px solid #E94560;\n"
"}\n"
"QLineEdit:focus{\n"
"border:2px solid #E94560;\n"
"}")
        self.lngField.setText("")
        self.lngField.setObjectName("lngField")
        self.tabWidget.addTab(self.addTab, "")
        self.removeTab = QtWidgets.QWidget()
        self.removeTab.setStyleSheet("background-color:#F2F7A1;")
        self.removeTab.setObjectName("removeTab")
        self.tableWidget = QtWidgets.QTableWidget(self.removeTab)
        self.tableWidget.setGeometry(QtCore.QRect(0, 0, 861, 431))
        self.tableWidget.setStyleSheet("border:none;")
        self.tableWidget.setObjectName("tableWidget")
        self.tableWidget.setColumnCount(4)
        self.tableWidget.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(3, item)
        self.deleteItem = QtWidgets.QPushButton(self.removeTab)
        self.deleteItem.setGeometry(QtCore.QRect(370, 440, 171, 51))
        font = QtGui.QFont()
        font.setPointSize(20)
        self.deleteItem.setFont(font)
        self.deleteItem.setFocusPolicy(QtCore.Qt.NoFocus)
        self.deleteItem.setStyleSheet("\n"
"QPushButton{\n"
"\n"
"background-color:#E94560;\n"
"color:white;\n"
"border-radius:25px;\n"
"\n"
"}\n"
"\n"
"QPushButton:hover{\n"
"border:5px solid white;\n"
"}\n"
"QPushButton:pressed{\n"
"padding-left:5px;\n"
"padding-top:5px;\n"
"}\n"
"\n"
"\n"
"\n"
"")
        self.deleteItem.setObjectName("deleteItem")
        self.tabWidget.addTab(self.removeTab, "")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1038, 21))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        self.tabWidget.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)


        self.Show_Map()
        self.Handle_Buttons()

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.username.setText(_translate("MainWindow", "Welcome: "+userInfo.user['name']))
        self.userId.setText(_translate("MainWindow", "ID: "+str(userInfo.user['id'])))
        self.addBtn.setText(_translate("MainWindow", "Add a new place"))
        self.username_2.setText(_translate("MainWindow", "Made with           by me"))
        self.signoutBtn.setText(_translate("MainWindow", "Sign out"))
        self.showBtn.setText(_translate("MainWindow", "Show my places"))
        self.deleteBtn.setText(_translate("MainWindow", "Delete a place"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.mapTab), _translate("MainWindow", "Tab 1"))
        self.latField.setPlaceholderText(_translate("MainWindow", "Latitude"))
        self.countryField.setPlaceholderText(_translate("MainWindow", "country"))
        self.descriptionField.setPlaceholderText(_translate("MainWindow", "what have you done there :)"))
        self.addToFavBtn.setText(_translate("MainWindow", "Add it to my Fav"))
        self.cityField.setPlaceholderText(_translate("MainWindow", "city"))
        self.addSouvenirImgBtn.setText(_translate("MainWindow", "Add a souvenir photo"))
        self.lngField.setPlaceholderText(_translate("MainWindow", "Longitude"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.addTab), _translate("MainWindow", "Tab 2"))
        item = self.tableWidget.horizontalHeaderItem(0)
        item.setText(_translate("MainWindow", "ID"))
        item = self.tableWidget.horizontalHeaderItem(1)
        item.setText(_translate("MainWindow", "Country"))
        item = self.tableWidget.horizontalHeaderItem(2)
        item.setText(_translate("MainWindow", "City"))
        item = self.tableWidget.horizontalHeaderItem(3)
        item.setText(_translate("MainWindow", "Description"))
        self.deleteItem.setText(_translate("MainWindow", "Delete"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.removeTab), _translate("MainWindow", "Page"))

##################################### HANDEL BUTTONS AND UI CHANGES ##################################################

    def Handle_Buttons(self):
        self.showBtn.clicked.connect(self.Open_ShowMyPlacesTap)
        self.addBtn.clicked.connect(self.Open_AddNewPlaceTap)
        self.deleteBtn.clicked.connect(self.Open_DeletePlaceTap)
        self.Load()

        self.addToFavBtn.clicked.connect(self.addFavBtnPressed)
        self.addSouvenirImgBtn.clicked.connect(self.browseImage)

        self.deleteItem.clicked.connect(self.deletePressed)


    def Handle_UI_Change(self):
        pass


 ##################################### OPEN TAB FUNCTIONS ##################################################
    def Open_ShowMyPlacesTap(self):
        self.tabWidget.setCurrentIndex(0)
        pass
    def Open_AddNewPlaceTap(self):
        self.tabWidget.setCurrentIndex(1)
        pass
    def Open_DeletePlaceTap(self):
        self.tabWidget.setCurrentIndex(2)
        pass

 ##################################### TAB-1 SHOW MAP ##################################################
    def Show_Map(self):
        self.view = QtWebEngineWidgets.QWebEngineView()


        self.verticalLayout_2.addWidget(self.view)



        location=(13.133932434766733, 16.103938729508073 )
        self.myMap = folium.Map(
                location=location,
                # tiles="Stamen Toner",
                zoom_start=2
        )
                # save map data to data object

        data = io.BytesIO()
        self.getData()
        self.myMap.save(data, close_file=False)
        self.view.setHtml(data.getvalue().decode())

    def popupHtml(self,row):
        countryName=row[0]
        cityName = row[1]
        description = row[5]
        # sizes = str(Image.open(io.BytesIO(row[4])))
        # print(sizes)

        img = base64.b64encode(row[4]).decode('utf-8')

        # print(img.decode('utf-8') )
        # fina = img.decode('utf-8')
        # print(img)

        html = """
            <!DOCTYPE html>
                <html>
                    <header>

                    </header>
                    <body>
                         <h3>Country : """+countryName+"""</h3>
                        <div >
                            <img src="data:image/jpeg;base64, """+img+""" alt="logo" style="max-width:75%;height:auto;" >
                        </div>

                        <h4>"""+cityName+""" City</h4>
                        <textarea rows="4" cols="50" style="border:none;font-size:15px; object-fit: contain;">"""+description+"""</textarea>


                    </body>

                </html>
        """

        return html

    def getData(self):
        try:
            self.my_dataBase = sqlite3.connect('users.db')
            self.curs = self.my_dataBase.cursor()
            query = "SELECT COUNTRY,CITY,LAT,LNG,IMG,DESCRIPTION FROM PLACES WHERE USER_ID = ?"
            self.curs.execute(query,str(userInfo.user['id']))

            rows = self.curs.fetchall()
            # print(img)


            for row in rows:
                # print(row)
                html = self.popupHtml(row)
                popup = folium.Popup(folium.Html(html, script=True), max_width=500)
                folium.Marker(

                    [row[2],row[3]],
                    popup=popup,
                    icon=folium.Icon(color='red', icon='heart', prefix='fa')
                ).add_to(self.myMap)


            self.curs.close()
        except sqlite3.Error as er:
            print("connection to the database failed " , er)
        finally:
            self.my_dataBase.close()



    def Load(self):
        self.tableWidget.setColumnWidth(1,100)
        self.tableWidget.setColumnWidth(2,100)
        self.tableWidget.setColumnWidth(3,300)
        try:
            self.db = sqlite3.connect('users.db')
            self.cur = self.db.cursor()
            result = self.cur.execute('''SELECT ID,COUNTRY,CITY,DESCRIPTION FROM PLACES WHERE USER_ID = ? ''', (str(userInfo.user['id'])))
            self.tableWidget.setRowCount(0)
            for row_number1, row_data1 in enumerate(result):
                self.tableWidget.insertRow(row_number1)
                for colum_number1, data1 in enumerate(row_data1):
                    self.tableWidget.setItem(row_number1,colum_number1,QtWidgets.QTableWidgetItem(str(data1)))


        except sqlite3.Error as er:
            print('SQLite error: %s' % (' '.join(er.args)))
            print("Exception class is: ", er.__class__)
            print('SQLite traceback: ')
            exc_type, exc_value, exc_tb = sys.exc_info()
            print(traceback.format_exception(exc_type, exc_value, exc_tb))
        self.db.close()



 ##################################### TAB-2 ADD NEW PLACE ##################################################
    def addFavBtnPressed(self):
        print("Add btn pressed")

        # take infos from the field
        country = self.countryField.text()
        city = self.cityField.text()
        lat = self.latField.text()
        lng = self.lngField.text()
        description = self.descriptionField.toPlainText()
        print("Info taken from the field")
        if(country == "" or city == "" or lat == "" or lng == "" or description == "" ):
            print("make sure to fill the information above")
            msg = QMessageBox()
            msg.setWindowTitle("Warning")
            msg.setIcon(QMessageBox.Critical)
            msg.setText("Make sure to fill the empty fields !")
            msg.exec_()


        else:
            try:
                #connect to the database
                sqliteConnection = sqlite3.connect('users.db')
                cursor = sqliteConnection.cursor()
                print("Connected to SQLite")

                # Insert query
                sqlite_insert_blob_query = '''INSERT INTO PLACES (USER_ID,COUNTRY,CITY,LAT,LNG,IMG,DESCRIPTION) VALUES(?,?,?,?,?,?,?)'''

                # Converting human readable file into
                # binary data
                empPhoto = self.convertToBinaryData(self.imagePath)

                # Convert data into tuple format
                data_tuple = (userInfo.user['id'],country,city,float(lat),float(lng),empPhoto,description)


                # using cursor object executing our query
                cursor.execute(sqlite_insert_blob_query,data_tuple)
                sqliteConnection.commit()
                print("Image inserted sucessfully as blob into table")
                cursor.close()

                # Message place added
                self.statusbar.showMessage("Successfully Added to your favourite places")
                # msg = QMessageBox()
                # msg.setWindowTitle("Successfully Added")
                # msg.setIcon(QMessageBox.Ok)
                # msg.setText("Successfully Added to your favourite places")
                # msg.exec_()
            except sqlite3.Error as error:
                print("Error while retriving the data ", error)
            finally:
                sqliteConnection.close()
                print("connection closed")


        self.countryField.setText("")
        self.cityField.setText("")
        self.latField.setText("")
        self.lngField.setText("")
        self.descriptionField.setPlainText("")

        self.verticalLayout_2.removeWidget(self.view)
        sip.delete(self.view)
        self.view = None

        self.Show_Map()
        self.Load()


    def convertToBinaryData(self,filename):
          # Convert binary format to images or files data
          with open(filename, 'rb') as file:
              blobData = file.read()
          return blobData

    def browseImage(self):
        print("browing image")

        fname = QFileDialog.getOpenFileName()
        self.imagePath = fname[0]

        self.personImg = QPixmap(self.imagePath)
        self.imgSouvenir.setPixmap(self.personImg)


 ##################################### TAB-3 DELETE A PLACE ##################################################
    def deletePressed(self):
        try:
            self.db = sqlite3.connect('users.db')
            self.curs = self.db.cursor()
            result = self.curs.execute('''SELECT ID,COUNTRY FROM PLACES WHERE USER_ID = ?''',(str(userInfo.user['id'])))

            for row in enumerate(result):
                # print(row[0])
                if row[0] == self.tableWidget.currentRow():
                    # print("ok")
                    print(row[1])
                    # print(row[1])
                    data = row[1]
                    id = data[0]
                    print(data)
                    print(type(data[0]))
                    self.curs.execute('''DELETE FROM PLACES WHERE ID = ? ;''',(str(data[0]),))
                    self.db.commit()
                    self.Load()
                    print("deleted")

        except sqlite3.Error as er:
            print('SQLite error: %s' % (' '.join(er.args)))
            print("Exception class is: ", er.__class__)
            print('SQLite traceback: ')
            exc_type, exc_value, exc_tb = sys.exc_info()
            print(traceback.format_exception(exc_type, exc_value, exc_tb))
        self.db.close()

        self.verticalLayout_2.removeWidget(self.view)
        sip.delete(self.view)
        self.view = None

        self.Show_Map()
        self.Load()


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
